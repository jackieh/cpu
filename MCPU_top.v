
//=======================================================
//  This code is generated by Terasic System Builder
//=======================================================

module MCPU_top(

	//////////// CLOCK //////////
	CLOCK_125_p,
	CLOCK_50_B5B,
	CLOCK_50_B6A,
	CLOCK_50_B7A,
	CLOCK_50_B8A,

	//////////// LED //////////
	LEDG,
	LEDR,

	//////////// KEY //////////
	CPU_RESET_n,
	KEY,

	//////////// SW //////////
	SW,

	//////////// SEG7 //////////
	HEX0,
	HEX1,
	HEX2,
	HEX3,

	//////////// Uart to USB //////////
	UART_RX,
	UART_TX 
);

//=======================================================
//  PARAMETER declarations
//=======================================================


//=======================================================
//  PORT declarations
//=======================================================

//////////// CLOCK //////////
input 		          		CLOCK_125_p;
input 		          		CLOCK_50_B5B;
input 		          		CLOCK_50_B6A;
input 		          		CLOCK_50_B7A;
input 		          		CLOCK_50_B8A;

//////////// LED //////////
output		     [7:0]		LEDG;
output		     [9:0]		LEDR;

//////////// KEY //////////
input 		          		CPU_RESET_n;
input 		     [3:0]		KEY;

//////////// SW //////////
input 		     [9:0]		SW;

//////////// SEG7 //////////
output		     [6:0]		HEX0;
output		     [6:0]		HEX1;
output		     [6:0]		HEX2;
output		     [6:0]		HEX3;

//////////// Uart to USB //////////
input 		          		UART_RX;
output		          		UART_TX;


//=======================================================
//  REG/WIRE declarations
//=======================================================

wire [31:0] memoutput;

//=======================================================
//  Structural coding
//=======================================================

TB_MCPU_core tb(
	.clkrst_core_clk(CLOCK_50_B5B),
	.clkrst_core_rst_n(CPU_RESET_n),
	.memoutput(memoutput),
	.meminput({22'b0, SW}),
	.uart_rx(UART_RX),
	.uart_tx(UART_TX),
    .uart_status(LEDR[9:5])
);

seg seg0(.in(memoutput[3:0]), .out(HEX0));
seg seg1(.in(memoutput[7:4]), .out(HEX1));
seg seg2(.in(memoutput[11:8]), .out(HEX2));
seg seg3(.in(memoutput[15:12]), .out(HEX3));
assign LEDG = memoutput[23:16];
assign LEDR[4:0] = memoutput[28:24];
/*
reg [23:0] ctr;
always @(posedge CLOCK_50_B5B, negedge CPU_RESET_n) begin
	if(~CPU_RESET_n) ctr <= 0;
	else ctr <= ctr + 16'b1;
end
assign LEDR[9:8] = ctr[23:22];
*/
endmodule
